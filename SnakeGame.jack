class SnakeGame {
	static SnakeGame game;

	field boolean gameStarted;
	field boolean gameFinished;

	field int gridLength; // Lateral
	field int gridWidth; // Vertical

	field int squareWidth; 

	field Snake snake;
	field Food food;
	field Array walls;

	constructor SnakeGame new() {

		let gameStarted = false;
		let gameFinished = false;
		let gridLength = 32; // Parallel to X axis
		let gridWidth = 16; // Parallel to Y axis
		let squareWidth = 16;

		let game = this;

		let snake  = Snake.new(gridLength,gridWidth);
		let food = Food.new(15,12);

		
		let walls = Array.new(4);
		let walls[0] = Wall.new(0,0,gridLength-1,0);
		let walls[1] = Wall.new(0,0,0,gridWidth-1);
		let walls[2] = Wall.new(0,gridWidth-1,gridLength-1,gridWidth-1);
		let walls[3] = Wall.new(gridLength-1,0,gridLength-1,gridWidth-1);



		return this;
	}



	method void run() {
		var char curChar;
		do Output.printString("Press Enter to Begin!");

		while (~(curChar = 128)) {
			let curChar = Keyboard.readChar();
			do Sys.wait(10);
		}

		do Screen.clearScreen();

		do game.updateScreen();



		return;
	}

	method void updateScreen() {

		do snake.draw(this);
		do food.draw(this);
		return;
	}





	method void dispose() {
		// FILL IN
		return;
	}






	// Draw Individual Objects at some space in the grid
	method void drawSnakeAt(int x, int y) {
		do Screen.setColor(true);
		do Screen.drawRectangle(x*squareWidth+1,y*squareWidth+1,((x+1)*squareWidth)-1,((y+1)*squareWidth)-1);
		return;
	}

	method void drawFoodAt(int x, int y) {
		do Screen.setColor(true);
		do Screen.drawRectangle(x*squareWidth+1,y*squareWidth+1,((x+1)*squareWidth)-1,((y+1)*squareWidth)-1);
		return;
	}

	method void drawWallAt(int x, int y) {
		return;
	}
}