class SnakeGame {
	static SnakeGame game;

	field boolean gameStarted;
	field boolean gameFinished;

	field int gridLength; // Lateral
	field int gridWidth; // Vertical

	field int squareWidth; 

	field Snake snake;
	field Food food;
	field Array walls;

	constructor SnakeGame new() {

		let gameStarted = false;
		let gameFinished = false;
		let gridLength = 32; // Parallel to X axis
		let gridWidth = 16; // Parallel to Y axis
		let squareWidth = 16;

		let game = this;

		let snake  = Snake.new(gridLength,gridWidth);
		let food = Food.new(15,12);

		
		let walls = Array.new(4);
		let walls[0] = Wall.new(0,0,gridLength,0);
		let walls[1] = Wall.new(0,0,0,gridWidth);
		let walls[2] = Wall.new(0,gridWidth,gridLength,gridWidth);
		let walls[3] = Wall.new(gridLength,0,gridLength,gridWidth);



		return this;
	}



	method void run() {
		var char curChar;
		var int placehold;
		var int i;
		var int j1;
		var int j2;
		var int randomSeed1;
		var int randomSeed2;
		var int oldSnakeLength;

		var int currentI;


		let oldSnakeLength = 2;
		let randomSeed1 = 17;
		let randomSeed2 = 24;
		let currentI = 45;

		do Output.printString("Press Enter to Begin!");

		do Output.println();
		do Output.println();

		do Output.printString("Rules:");
		do Output.println();
		do Output.printString("	- WASD controls (w -> up, a -> left, etc.) ");
		do Output.println();
		do Output.printString("	- Eat as much food (circles) without running into side wall or yourself");
		do Output.println();
		do Output.printString(" ");
		do Output.println();
		do Output.printString("Good Luck!");

		while (~(curChar = 128)) {
			let curChar = Keyboard.keyPressed();
			let randomSeed1 = randomSeed1+7;
			let randomSeed2 = randomSeed2+randomSeed1;
			if (randomSeed1>100) {
				let randomSeed1 = randomSeed1 - 99;
			}
			if (randomSeed2>10000) {
				let randomSeed2 = randomSeed2-9999;
			}
		}

		do Screen.clearScreen();


		let i = 0;
		let j1 = 0;
		let j2 = gridWidth-1;

		while (i<gridLength) {
			do game.drawWallAt(i,j1);
			do game.drawWallAt(i,j2);
			let i = i+1;
		}

		let i = 0;
		let j1 = 0;
		let j2 = gridLength-1;

		while (i<gridWidth) {
			do game.drawWallAt(j1,i);
			do game.drawWallAt(j2,i);
			let i = i+1;
		}


		do food.setXY((randomSeed1-((randomSeed1/(gridLength-4))*(gridLength-4)))+2,(randomSeed2-((randomSeed2/(gridWidth-4))*(gridWidth-4)))+2);

		
		if ((randomSeed2-((randomSeed2/(gridWidth-4))*(gridWidth-4)))+2 = gridWidth/2) {
			if ((randomSeed1-((randomSeed1/(gridLength-4))*(gridLength-4)))+2 = gridLength/4) {
				do food.setXY(11,11);
			}

			if ((randomSeed1-((randomSeed1/(gridLength-4))*(gridLength-4)))+2 = (gridLength/4)-1) {
				do food.setXY(11,11);
			}
		}

		while (~gameFinished) {


			do game.updateScreen();
			let gameFinished = snake.move(food.getX(),food.getY(),food,gridLength,gridWidth);

			if (~(snake.getLength()=oldSnakeLength)) {
				if (snake.getLength() <21) {
					let oldSnakeLength = snake.getLength();
					let currentI = currentI-(currentI/20);
				}
			}



			let placehold = currentI;

			while (placehold>0) {
				if (~(Keyboard.keyPressed()=0)) {
					if (Keyboard.keyPressed()=87) { // W
						do snake.changeDirection(3);
					}

					if (Keyboard.keyPressed()=65) { // A
						do snake.changeDirection(4);
					}

					if (Keyboard.keyPressed()=83) { // S
						do snake.changeDirection(1);
					}

					if (Keyboard.keyPressed()=68) { // D
						do snake.changeDirection(2);
					}
					
				}

				let placehold = placehold-1;

				do Sys.wait(2);
			}
		}

		do Sys.wait(500);


		do Screen.clearScreen();

		do Output.printString("       Points Scored: ");
		do Output.printInt(snake.getLength());
		do Output.println();
		do Output.println();
		do Output.printString("       Better Luck Next Time!");

		do Sys.wait(500);


		return;
	}

	method void updateScreen() {
		


		do Screen.setColor(false);
		do Screen.drawRectangle(squareWidth,squareWidth,(squareWidth*(gridLength-1)),(squareWidth*(gridWidth-1)));
		// do Screen.clearScreen();
		do Screen.setColor(true);


		do snake.draw(this);
		do food.draw(this);
		


		return;
	}





	method void dispose() {
		do Sys.wait(5000);
		return;
	}






	// Draw Individual Objects at some space in the grid
	method void drawSnakeAt(int x, int y) {
		do Screen.setColor(true);
		do Screen.drawRectangle(x*squareWidth+1,y*squareWidth+1,((x+1)*squareWidth)-1,((y+1)*squareWidth)-1);
		return;
	}

	method void drawFoodAt(int x, int y) {
		do Screen.setColor(true);
		do Screen.drawCircle(((x*squareWidth+1)+(((x+1)*squareWidth)-1))/2,((y*squareWidth+1)+((y+1)*squareWidth)-1)/2,squareWidth/2);
		return;
	}

	method void drawWallAt(int x, int y) {
		do Screen.setColor(true);
		do Screen.drawRectangle(x*squareWidth,y*squareWidth,((x+1)*squareWidth)-1,((y+1)*squareWidth)-1);
		return;
	}
}